worker_processes  1;
user vcap users;
error_log logs/error.log info;
daemon off;
env JWT_PUBLIC_KEY;
env JWT_PUBLIC_KEY_FILE;
env KRB5_CONFIG;
env USER_ID;

events {
    worker_connections 1024;
}
http {
    lua_code_cache off;
    proxy_no_cache 1;
    proxy_cache_bypass 1;
    proxy_temp_path /tmp/proxy_temp 1 2;
    lua_package_path "/libs/?.lua;;";

    init_by_lua '
      tap_auth = require "tap-auth"
      public_key = tap_auth.getCACert(os.getenv("JWT_PUBLIC_KEY_FILE"))
    ';
    
    upstream proxy-pass {
      server jupyter.localnet:8888;
    }

    server {
        listen 8080;
        rewrite_log on;

	location / {
            default_type text/html;

            access_by_lua '
		tap_auth.auth()
            ';
	    proxy_pass http://proxy-pass; 
        }

        location ~ ^/terminals/.*$|^/api/kernels/.*$ {
            default_type text/html;

            access_by_lua '
		tap_auth.auth()
            ';

	    proxy_pass http://proxy-pass;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Origin http://proxy-pass;
        }
    }
}
