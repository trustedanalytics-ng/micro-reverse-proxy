worker_processes  1;
user vcap users;
error_log logs/error.log info;
daemon off;

env JWT_PUBLIC_KEY;
env JWT_PUBLIC_KEY_FILE;
env KRB5_CONFIG;
env USER_ID;
env UAA_URL;
env OAUTH_CLIENT_ID;
env OAUTH_CLIENT_SECRET;

events {
  worker_connections 1024;
}

http {
  proxy_no_cache 1;
  proxy_cache_bypass 1;
  proxy_temp_path /tmp/proxy_temp 1 2;

  lua_package_path "/libs/?.lua;;";
  lua_code_cache off;
  lua_shared_dict session_store 128k;

  init_by_lua '
    require "session-manager"
    tap_auth = require "tap-auth"
    local config = {
      public_key = os.getenv("JWT_PUBLIC_KEY"),
      public_key_file = os.getenv("JWT_PUBLIC_KEY_FILE"),
      uid = os.getenv("USER_ID"),
      client_id = os.getenv("OAUTH_CLIENT_ID"),
      client_secret = os.getenv("OAUTH_CLIENT_SECRET")
    }
    tap_auth.setConfig(config)
    assert(ngx.shared.session_store ~= nill, "Cant find session store configuration!!!!")
    session = SessionMgr(ngx.shared.session_store, config.uid)
  ';

  upstream proxy-pass {
    server jupyter.localnet:8888;
  }

  upstream uaa-pass {
    server uaa.localnet:8080;
  }

  server {
    listen 8080;
    rewrite_log on;

    location /uaa {
      proxy_pass http://uaa-pass;
    }

    location / {
      default_type text/html;
      access_by_lua '
        tap_auth.oauth()
      ';
      proxy_pass http://proxy-pass;
    }

    location ~ ^/terminals/.*$|^/api/kernels/.*$ {
      default_type text/html;
      access_by_lua '
        tap_auth.auth()
      ';

      proxy_pass http://proxy-pass;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Origin http://proxy-pass;
    }
  }
}