worker_processes  1;
user vcap users;
#error_log logs/error.log info;
error_log stderr info;
pid /tmp/nginx.pid;

daemon off;

env JWT_PUBLIC_KEY;
env JWT_PUBLIC_KEY_FILE;
env KRB5_CONFIG;
env USER_ID;
env UAA_ADDRESS;
env UAA_AUTHORIZATION_URI;
env OAUTH_CLIENT_ID;
env OAUTH_CLIENT_SECRET;
env SESSION_ID_SEED;

events {
  worker_connections 1024;
}

http {
  # specify dns resolver address
  # resolver 172.17.0.1;
  proxy_no_cache 1;
  proxy_cache_bypass 1;
  proxy_temp_path /tmp/proxy_temp 1 2;

  lua_code_cache off;
  lua_shared_dict session_store 128k;
  lua_shared_dict public_key 128k;

  lua_package_path "/libs/?.lua;;";
  init_by_lua '
    require "session-manager"
    require "configuration"
    require "tap-auth"
    jwt = require "resty.jwt"
    validators = require "resty.jwt-validators"
    cjson = require "cjson"
    md5 = require "resty.md5"
    config = Configuration():verify()
    tap_auth = TapAuth(config, jwt, validators, cjson)
    tap_auth:setNgxContext(ngx)
  ';

  upstream proxy-pass {
    # server jupyter.localnet:8888;
    server localhost:8888;
  }

  server {
    listen 8080;
    #rewrite_log on;
    access_log off;

    location ~ ^/token_key$|^/oauth/token$ {
      set_by_lua $uaa_address 'return os.getenv("UAA_ADDRESS")';
      proxy_pass $uaa_address;
    }

    location / {
      default_type text/html;
      access_by_lua '
        local session = SessionMgr(ngx, config)
        session:isValidSession()
               :ifUnauthorizedAccess(tap_auth.terminateProcessing)
               :aquireOauthTokens(tap_auth:retriveTokensMethod(), tap_auth:refreshAccessTokenMethod())
               :checkAccess(tap_auth:checkIfAuthorizedMethod())
               :refreshTokenIfExpired(tap_auth:checkExpirationMethod())
               :grantAccess(tap_auth.ktinit)
      ';
      proxy_pass http://proxy-pass;
      proxy_set_header Origin http://proxy-pass;
    }

    location ~ ^/terminals/.*$|^/api/kernels/.*$ {
      default_type text/html;
      access_by_lua '
        local session = SessionMgr(ngx, config)
        session:isValidSession()
               :ifUnauthorizedAccess(tap_auth.terminateProcessing)
               :aquireOauthTokens(tap_auth:retriveTokensMethod(), tap_auth:refreshAccessTokenMethod())
               :checkAccess(tap_auth:checkIfAuthorizedMethod())
               :refreshTokenIfExpired(tap_auth:checkExpirationMethod())
               :grantAccess(tap_auth.ktinit)
      ';

      proxy_pass http://proxy-pass;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Origin http://proxy-pass;
    }
  }
}
